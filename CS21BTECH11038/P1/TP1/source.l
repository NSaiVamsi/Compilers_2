%option yylineno
%{
#include <stdio.h>
#include <stdlib.h>
FILE *ip,*op1 ,*op2;
int count =0; 
int count2 =0;
%}

space [ \t\n]+

digit [0-9]

number {digit}+

alphabet [a-zA-Z]

special_char [-/+*_\\#@:&]

operators {space}[-+*/_=%]{space}

punctuation [,;:"']

datatype ("null"|"character_1"|"integer_2"|"string")

reserved_keys ("in case that"|"do"|"otherwise"|"jump to"|"return"|"gteq"|"lteq"|"gt"|"lt"|"eq"|"lte"|"gte"|"neq"|"or"|"and")

special_symbols ("["|"]"|"("|")")

label_no [1-9][0-9]*

iD {special_char}?({digit}|{alphabet})+

notiD ({digit}|{alphabet})+{special_char}+({digit}|{alphabet})+

string \".*\"

special {alphabet}+{space}_{space}{digit}+

%%

{special} {
	fprintf(op1,"ID: ");
	int c;
	char s[1000];
	for(int i=0;i<yyleng;i++){
		if(yytext[i] == ' '){
			c=i;
			break;
		}
		else {
			s[i]=yytext[i];
			fprintf(op1,"%c",yytext[i]);
		}
	}
	fprintf(op1,"\n");
	fprintf(op1,"Operator:_\n");
	fprintf(op1,"constant %c\n",yytext[c+3]);
	
	fprintf(op2,"pow(%s,%d)",s,yytext[c+3]);
	

	
}

{reserved_keys} {
	fprintf(op1,"Reserved Keyword: %s\n",yytext );
	if(strcmp(yytext ,"in case that")==0){
		fprintf(op2,"if");
		count=1;}
		
	else if(strcmp(yytext ,"otherwise")==0){
		fprintf(op2,"else");}
		
	else if(strcmp(yytext ,"jump to")==0){
		fprintf(op2,"goto:");}
	
	else if(strcmp(yytext ,"return")==0){
		fprintf(op2,"return");}
		
	else if(strcmp(yytext ,"gteq")==0){
		fprintf(op2,">=");}
		
	else if(strcmp(yytext ,"lteq")==0){
		fprintf(op2,"<=");}
		
	else if(strcmp(yytext ,"gt")==0){
		fprintf(op2,">");}
		
	else if(strcmp(yytext ,"lt")==0){
		fprintf(op2,"<");}
		
	else if(strcmp(yytext ,"eq")==0){
		fprintf(op2,"==");}
		
	else if(strcmp(yytext ,"neq")==0){
		fprintf(op2,"!=");}
		
	else if(strcmp(yytext ,"or")==0){
		fprintf(op2,"||");}
		
	else if(strcmp(yytext ,"and")==0){
		fprintf(op2,"&&");}
}

pp{label_no} {ECHO;fprintf(op1,"label: %s\n",yytext);
}

\".*\"   {
fprintf(op1,"punctuation: %c\n",yytext[0]);
fprintf(op1,"string: ");
for(int i=1;i<(yyleng-1);i++){
fprintf(op1,"%c",yytext[i]);
}
fprintf(op1,"\n");
fprintf(op1,"punctuation: %c\n",yytext[yyleng-1]);
}
'.' {fprintf(op1,"punctuation: %c\n",yytext[0]);
fprintf(op1,"punctuation: %c\n",yytext[1]);
fprintf(op1,"punctuation: %c\n",yytext[0]);
}
{punctuation} {ECHO; fprintf(op1,"punctuation: %s\n",yytext);
	if(strcmp(":",yytext)==0){
		continue;
	}
	else{fprintf(op2,"%s",yytext);}
}
{special_symbols} {ECHO; fprintf(op1,"special symbol: %s\n",yytext);
	if(strcmp("(",yytext)==0){
		fprintf(op2,"(");
	}
	else if(strcmp(")",yytext)==0){
		fprintf(op2,")");
	}
	else if(strcmp("[",yytext)==0 && count==0){
		fprintf(op2,"{");
	}
	else if(strcmp("[",yytext)==0 && count==1){
		fprintf(op2,"(");
	}
	else if(strcmp("]",yytext)==0 && count==1){
		fprintf(op2,")");
		count--;
	}
	else if(strcmp("]",yytext)==0 && count==0){
		fprintf(op2,"}");
	}
}
{datatype} {fprintf(op1,"datatype: %s\n",yytext);
	if(strcmp(yytext,"null")==0){
		fprintf(op2,"void");}
		
	else if(strcmp(yytext,"integer_2")==0){
		fprintf(op2,"int");}
		
	else if(strcmp(yytext,"character_1")==0){
		fprintf(op2,"char");}
		
	else if(strcmp(yytext,"string")==0){
		fprintf(op2,"char*");}
}
{number} {fprintf(op1,"const: %s\n",yytext);
	fprintf(op2,"%s",yytext);
}

{notiD} {fprintf(op1,"error in generating the tokens and code\n"); return 1;}
{iD} {fprintf(op1,"ID: %s\n",yytext);
	fprintf(op2,"%s",yytext);
}


{operators} {fprintf(op1,"Operator: %s\n",yytext);
	fprintf(op2,"%s",yytext);
}


{space} {ECHO;fprintf(op2,"%s",yytext);}

. {fprintf(op1,"error found in the line with label pp%d\nProgram Abort",(yylineno-1));return 1;}

%%

int main(int argc, char** argv){
    ip = fopen(argv[1],"r");
    yyin = ip;
    op1 = fopen("token_stream.txt","w");
    fprintf(op1,"Name: Narsupalli Sai Vamsi\n");
    fprintf(op1,"ID: CS21BTECH11038\n");
    fprintf(op1,"The folllowing is the Token stream generated by my lexical analyser\n\n");
    
    op2 = fopen("C_code.txt","w");
    fprintf(op2,"Name: Narsupalli Sai Vamsi\n");
    fprintf(op2,"ID: CS21BTECH11038\n");
    fprintf(op2,"The folllowing is the C code generated by my lexical analyser\n\n");
    yylex();
    
    fclose(ip);
    fclose(op1);
    fclose(op2);  
}

int yywrap(void){}
